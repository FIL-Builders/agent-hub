meta:
spec\_name: impulse-ai/http
spec\_version: 0.2.0
generated: '2025-08-07'
library\_version: ^1.0.0
language: http
homepage: [https://github.com/impulse-ai](https://github.com/impulse-ai)
tags:
\- llm
\- fine-tuning
\- http-api
purpose: Teach LLM agents how to call the Impulse AI public HTTP v1 API for managing datasets, fine‑tuning jobs, models, usage and billing.
guiding\_principles:
\- Always send the `x-api-key` header; requests without it are rejected.
\- Use the provided `job_name`, `dataset_name`, and `model_name` strings as stable identifiers.
\- Page large result sets with `limit` and `cursor` query params when available.
\- Poll long‑running fine‑tuning jobs until `status` is `SUCCEEDED` or `FAILED` before downloading artifacts.
\- Treat all endpoints as idempotent where documented; avoid blind retries on mutating calls.
design\_notes: Sources extracted from the uploaded `impulseai.out` file; endpoints were grouped by resource type (API keys, datasets, fine‑tuning, models, users, usage & billing). Symbol names mirror REST paths for clarity.

groups:

* name: API Keys
  exports:

  * api\_keys.create\_api\_key
  * api\_keys.list\_api\_keys
  * api\_keys.get\_api\_key
  * api\_keys.update\_api\_key
  * api\_keys.delete\_api\_key
    symbols:
    api\_keys.create\_api\_key:
    kind: function
    summary: Create a new API key for the current user.
    guidance:

    * Name keys descriptively; they appear in the dashboard.
    * Store the returned `secret` securely—it's not retrievable later.
      example:
      code: |
      // Node ≥18
      const res = await fetch('[https://api.impulse.ai/v1/api-keys](https://api.impulse.ai/v1/api-keys)', {
      method: 'POST',
      headers: { 'x-api-key': process.env.IMPULSE\_API\_KEY },
      body: JSON.stringify({ name: 'ci-bot', expires\_in\_days: 30 })
      });
      console.log(await res.json());
      lang: javascript
      since: '1.0'
      api\_keys.list\_api\_keys:
      kind: function
      summary: Return all API keys belonging to the caller.
      guidance:
    * Use for rotation audits before deleting stale keys.
    * Supports pagination via `limit` and `cursor`.
      example:
      code: |
      curl -H "x-api-key: \$IMPULSE\_API\_KEY"&#x20;
      [https://api.impulse.ai/v1/api-keys](https://api.impulse.ai/v1/api-keys)
      lang: bash
      since: '1.0'
      api\_keys.get\_api\_key:
      kind: function
      summary: Get metadata for a single API key.
      guidance:
    * The `key_name` path parameter is the human‑readable name, not the secret.
    * Returns timestamps for creation, expiration and last use.
      example:
      code: |
      await client.api\_keys.get('ci-bot');
      lang: javascript
      since: '1.0'
      api\_keys.update\_api\_key:
      kind: function
      summary: Change a key’s name or expiration date.
      guidance:
    * Pass only fields that need updating.
    * Setting `expires_at` to `null` makes the key non‑expiring.
      example:
      code: |
      fetch('[https://api.impulse.ai/v1/api-keys/ci-bot](https://api.impulse.ai/v1/api-keys/ci-bot)', {
      method: 'PATCH',
      headers: { 'x-api-key': process.env.IMPULSE\_API\_KEY },
      body: JSON.stringify({ name: 'ci-bot-2025' })
      });
      lang: javascript
      since: '1.0'
      api\_keys.delete\_api\_key:
      kind: function
      summary: Permanently revoke an API key.
      guidance:
    * Immediate effect—subsequent requests using that key fail with 401.
    * Useful for compromised or unused keys.
      example:
      code: |
      curl -X DELETE -H "x-api-key: \$IMPULSE\_API\_KEY"&#x20;
      [https://api.impulse.ai/v1/api-keys/ci-bot](https://api.impulse.ai/v1/api-keys/ci-bot)
      lang: bash
      since: '1.0'

* name: Models
  exports:

  * models.list\_base\_models
  * models.get\_base\_model
  * models.list\_fine\_tuned\_models
  * models.get\_fine\_tuned\_model
    symbols:
    models.list\_base\_models:
    kind: function
    summary: List foundation models available for fine‑tuning.
    guidance:

    * Each item includes `context_length` and parameter count.
    * Cache the list client‑side to avoid frequent calls.
      example:
      code: |
      const models = await fetch('[https://api.impulse.ai/v1/models/base](https://api.impulse.ai/v1/models/base)', {
      headers: { 'x-api-key': process.env.IMPULSE\_API\_KEY }
      }).then(r => r.json());
      lang: javascript
      since: '1.0'
      models.get\_base\_model:
      kind: function
      summary: Fetch details for a single base model.
      guidance:
    * Use `model_name` from the `list_base_models` response.
    * Returns training‑recipe compatibility flags.
      example:
      code: |
      curl -H "x-api-key: \$IMPULSE\_API\_KEY"&#x20;
      [https://api.impulse.ai/v1/models/base/llama3-8b](https://api.impulse.ai/v1/models/base/llama3-8b)
      lang: bash
      since: '1.0'
      models.list\_fine\_tuned\_models:
      kind: function
      summary: Return all fine‑tuned models owned by the caller.
      guidance:
    * Combine with `status` and `order` query params to filter.
    * Responses include latest evaluation metrics.
      example:
      code: |
      const myModels = await fetch('[https://api.impulse.ai/v1/models/fine-tuned](https://api.impulse.ai/v1/models/fine-tuned)', {
      headers: { 'x-api-key': process.env.IMPULSE\_API\_KEY }
      }).then(r => r.json());
      lang: javascript
      since: '1.0'
      models.get\_fine\_tuned\_model:
      kind: function
      summary: Retrieve metadata for one fine‑tuned model.
      guidance:
    * Includes a download URL once `status` is `SUCCEEDED`.
    * Use when wiring the model into inference pipelines.
      example:
      code: |
      curl -H "x-api-key: \$IMPULSE\_API\_KEY"&#x20;
      [https://api.impulse.ai/v1/models/fine-tuned/support-bot-2025](https://api.impulse.ai/v1/models/fine-tuned/support-bot-2025)
      lang: bash
      since: '1.0'

* name: Users
  exports:

  * users.get\_me
  * users.update\_me
    symbols:
    users.get\_me:
    kind: function
    summary: Return profile details for the authenticated user.
    guidance:

    * Useful for sanity‑checking that the correct key is used.
    * No request parameters.
      example:
      code: |
      fetch('[https://api.impulse.ai/v1/users/me](https://api.impulse.ai/v1/users/me)', {
      headers: { 'x-api-key': process.env.IMPULSE\_API\_KEY }
      });
      lang: javascript
      since: '1.0'
      users.update\_me:
      kind: function
      summary: Update the current user’s profile.
      guidance:
    * Only supplied fields change; omit others to keep current values.
    * Plan tier cannot be modified through this endpoint.
      example:
      code: |
      fetch('[https://api.impulse.ai/v1/users/me](https://api.impulse.ai/v1/users/me)', {
      method: 'PATCH',
      headers: { 'x-api-key': process.env.IMPULSE\_API\_KEY },
      body: JSON.stringify({ full\_name: 'Alice ⌘' })
      });
      lang: javascript
      since: '1.0'

* name: Datasets
  exports:

  * datasets.create\_dataset
  * datasets.list\_datasets
  * datasets.get\_dataset
  * datasets.update\_dataset
  * datasets.delete\_dataset
    symbols:
    datasets.create\_dataset:
    kind: function
    summary: Upload and register a new training dataset.
    guidance:

    * Accepts JSONL, CSV or Parquet files up to 20 GB.
    * Dataset names must be unique within the account.
      example:
      code: |
      curl -X POST [https://api.impulse.ai/v1/datasets](https://api.impulse.ai/v1/datasets)&#x20;
      -H "x-api-key: \$IMPULSE\_API\_KEY"&#x20;
      -F "file=@chat\_data.jsonl"&#x20;
      -F 'meta={"name":"support-chat"};type=application/json'
      lang: bash
      since: '1.0'
      datasets.list\_datasets:
      kind: function
      summary: Fetch a paginated list of datasets.
      guidance:
    * Add `status` query param (`PROCESSING`, `READY`, `FAILED`) to filter.
    * Combine with `limit` & `cursor` for large accounts.
      example:
      code: |
      const data = await fetch('[https://api.impulse.ai/v1/datasets?limit=100](https://api.impulse.ai/v1/datasets?limit=100)', {
      headers: { 'x-api-key': process.env.IMPULSE\_API\_KEY }
      }).then(r => r.json());
      lang: javascript
      since: '1.0'
      datasets.get\_dataset:
      kind: function
      summary: Get metadata and processing progress for a dataset.
      guidance:
    * Include `dataset_name` from `list_datasets`.
    * Once `status` is `READY`, the dataset can be used in fine‑tuning.
      example:
      code: |
      curl -H "x-api-key: \$IMPULSE\_API\_KEY"&#x20;
      [https://api.impulse.ai/v1/datasets/support-chat](https://api.impulse.ai/v1/datasets/support-chat)
      lang: bash
      since: '1.0'
      datasets.update\_dataset:
      kind: function
      summary: Patch dataset description or visibility.
      guidance:
    * Cannot change the underlying file once uploaded.
    * Set `visibility` to `"PRIVATE"` or `"PUBLIC"`.
      example:
      code: |
      fetch('[https://api.impulse.ai/v1/datasets/support-chat](https://api.impulse.ai/v1/datasets/support-chat)', {
      method: 'PATCH',
      headers: { 'x-api-key': process.env.IMPULSE\_API\_KEY },
      body: JSON.stringify({ description: 'Redacted support tickets' })
      });
      lang: javascript
      since: '1.0'
      datasets.delete\_dataset:
      kind: function
      summary: Delete a dataset (irreversible).
      guidance:
    * Fails if any active fine‑tuning job references the dataset.
    * Consider archiving instead of deletion for audit purposes.
      example:
      code: |
      curl -X DELETE -H "x-api-key: \$IMPULSE\_API\_KEY"&#x20;
      [https://api.impulse.ai/v1/datasets/support-chat](https://api.impulse.ai/v1/datasets/support-chat)
      lang: bash
      since: '1.0'

* name: Fine‑Tuning Jobs
  exports:

  * fine\_tuning.create\_job
  * fine\_tuning.list\_jobs
  * fine\_tuning.get\_job
  * fine\_tuning.cancel\_job
    symbols:
    fine\_tuning.create\_job:
    kind: function
    summary: Launch an asynchronous fine‑tuning job.
    guidance:

    * Required: `base_model`, `dataset_name`, `strategy` (`lora`, `qlora`, `full`).
    * Track the returned `job_name` to query progress.
      example:
      code: |
      fetch('[https://api.impulse.ai/v1/fine-tuning](https://api.impulse.ai/v1/fine-tuning)', {
      method: 'POST',
      headers: { 'x-api-key': process.env.IMPULSE\_API\_KEY },
      body: JSON.stringify({
      base\_model: 'llama3-8b',
      dataset\_name: 'support-chat',
      strategy: 'lora',
      epochs: 3
      })
      });
      lang: javascript
      since: '1.0'
      fine\_tuning.list\_jobs:
      kind: function
      summary: List fine‑tuning jobs filtered by status or dataset.
      guidance:
    * Supports query params `status` and `dataset_name`.
    * Newest jobs first when `order=-created_at`.
      example:
      code: |
      await fetch('[https://api.impulse.ai/v1/fine-tuning?status=RUNNING](https://api.impulse.ai/v1/fine-tuning?status=RUNNING)', {
      headers: { 'x-api-key': process.env.IMPULSE\_API\_KEY }
      });
      lang: javascript
      since: '1.0'
      fine\_tuning.get\_job:
      kind: function
      summary: Get detailed state for a single fine‑tuning job.
      guidance:
    * Response includes live metrics such as epoch, loss and validation scores.
    * Download artifacts once `status` is `SUCCEEDED`.
      example:
      code: |
      curl -H "x-api-key: \$IMPULSE\_API\_KEY"&#x20;
      [https://api.impulse.ai/v1/fine-tuning/ft-job-2025-01](https://api.impulse.ai/v1/fine-tuning/ft-job-2025-01)
      lang: bash
      since: '1.0'
      fine\_tuning.cancel\_job:
      kind: function
      summary: Request cancellation of a running job.
      guidance:
    * Cancellation is best‑effort; the job may complete its current step.
    * No effect on jobs that have already finished.
      example:
      code: |
      fetch('[https://api.impulse.ai/v1/fine-tuning/ft-job-2025-01/cancel](https://api.impulse.ai/v1/fine-tuning/ft-job-2025-01/cancel)', {
      method: 'POST',
      headers: { 'x-api-key': process.env.IMPULSE\_API\_KEY }
      });
      lang: javascript
      since: '1.0'

* name: Usage & Billing
  exports:

  * usage.list\_usage\_records
  * usage.get\_total\_cost
  * billing.get\_credit\_history
  * billing.add\_credits
    symbols:
    usage.list\_usage\_records:
    kind: function
    summary: Return metered usage records grouped by day.
    guidance:

    * Filter by `from` and `to` ISO dates for partial periods.
    * Combine with `granularity` to get hourly breakdowns.
      example:
      code: |
      const usage = await fetch('[https://api.impulse.ai/v1/usage/records?from=2025-07-01](https://api.impulse.ai/v1/usage/records?from=2025-07-01)', {
      headers: { 'x-api-key': process.env.IMPULSE\_API\_KEY }
      }).then(r => r.json());
      lang: javascript
      since: '1.0'
      usage.get\_total\_cost:
      kind: function
      summary: Get the current month’s running cost subtotal.
      guidance:
    * Figures update near‑real‑time.
    * Include this endpoint in cost dashboards.
      example:
      code: |
      curl -H "x-api-key: \$IMPULSE\_API\_KEY"&#x20;
      [https://api.impulse.ai/v1/usage/total-cost](https://api.impulse.ai/v1/usage/total-cost)
      lang: bash
      since: '1.0'
      billing.get\_credit\_history:
      kind: function
      summary: List credit deposits and adjustments.
      guidance:
    * Helpful when reconciling invoices.
    * Sorted by `created_at` descending by default.
      example:
      code: |
      await fetch('[https://api.impulse.ai/v1/billing/credit-history](https://api.impulse.ai/v1/billing/credit-history)', {
      headers: { 'x-api-key': process.env.IMPULSE\_API\_KEY }
      });
      lang: javascript
      since: '1.0'
      billing.add\_credits:
      kind: function
      summary: Generate a payment link to purchase additional credits.
      guidance:
    * Returns a Stripe Checkout URL in `redirect_url`.
    * Link expires after 10 minutes; regenerate if needed.
      example:
      code: |
      curl -H "x-api-key: \$IMPULSE\_API\_KEY"&#x20;
      [https://api.impulse.ai/v1/billing/credits-add](https://api.impulse.ai/v1/billing/credits-add)
      lang: bash
      since: '1.0'

common\_workflows:

* title: Fine‑tune a support‑chatbot model
  steps:

  * Create a JSONL dataset and upload via `datasets.create_dataset`.
  * Wait until dataset status is READY.
  * Call `fine_tuning.create_job` with `base_model` and `dataset_name`.
  * Poll `fine_tuning.get_job` until status is SUCCEEDED.
  * Download the resulting model with `models.get_fine_tuned_model`.

