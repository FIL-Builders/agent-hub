meta:
spec\_name: ipfs/helia
spec\_version: "0.2.0"
generated: "2025-07-30"
library\_version: "^5.5.0"  # npm page shows 5.5.0 published 7 days ago ([npm][1])
language: typescript
homepage: [https://github.com/ipfs/helia](https://github.com/ipfs/helia)
tags: \[ipfs, p2p, typescript, js]
purpose: >
Concise, actionable reference for Helia – the lean, modular TypeScript implementation
of IPFS – enabling senior developers to spin up nodes, tune defaults, and integrate
with the wider IPFS/libp2p stack confidently.
guiding\_principles:
\- Prefer createHelia → @helia/unixfs for everyday file ops.
\- Re‑use heliaDefaults/libp2pDefaults instead of hand‑rolling config.
\- Keep nodes ephemeral in browsers; persist stores server‑side.
\- Use await/async everywhere; Helia APIs are promise‑centric.
\- Network services are modular – enable only what your app needs.
design\_notes: >
Exports, signatures and examples sourced from the official TypeDoc pages and npm
registry: createHelia ([ipfs.github.io][2]), heliaDefaults ([ipfs.github.io][3]),
libp2pDefaults ([ipfs.github.io][4]), constant & error lists ([ipfs.github.io][5]),
package version ([npm][1]).  Groups chosen to keep ≤ 9 exports each.

groups:

* name: core
  exports: \[createHelia, heliaDefaults, libp2pDefaults]
  symbols:
  createHelia:
  kind: function
  summary: "Create and return an IPFS Helia node instance ([ipfs.github.io][2])"
  guidance:
  \- Await the promise; the node is started automatically unless `init.start` is false.
  \- Pass a partial `HeliaInit` to override defaults (e.g. custom blockstore).
  example:
  code: |
  import { createHelia } from 'helia'
  import { unixfs } from '@helia/unixfs'

  ```
      const helia = await createHelia()
      const fs = unixfs(helia)

      const cid = await fs.addBytes(new TextEncoder().encode('hello'))
      console.log('stored under', cid.toString())
    lang: javascript
  ```

  heliaDefaults:
  kind: function
  summary: "Return the full HeliaInit config with sensible defaults ([ipfs.github.io][3])"
  guidance:
  \- Use to peek at default values before mutating them.
  \- Combine with `createHelia({ ...await heliaDefaults(), ...overrides })`.
  example:
  code: |
  import { createHelia, heliaDefaults } from 'helia'

  ```
      const defaults = await heliaDefaults()
      // tweak: disable DHT
      defaults.libp2p.services.dht = undefined

      const helia = await createHelia(defaults)
    lang: javascript
  ```

  libp2pDefaults:
  kind: function
  summary: "Generate a ready‑to‑use libp2p config matching Helia defaults ([ipfs.github.io][4])"
  guidance:
  \- Handy when embedding Helia inside an existing libp2p stack.
  \- Pass `start:false` if you need manual control over libp2p lifecycle.
  example:
  code: |
  import { createLibp2p } from 'libp2p'
  import { libp2pDefaults } from 'helia'

  ```
      const lpConf = libp2pDefaults({ start: false })
      const libp2p = await createLibp2p(lpConf)
    lang: javascript
  ```

* name: constants
  exports: \[DEFAULT\_SESSION\_MAX\_PROVIDERS, DEFAULT\_SESSION\_MIN\_PROVIDERS]
  symbols:
  DEFAULT\_SESSION\_MAX\_PROVIDERS:
  kind: constant
  summary: "Upper bound on providers queried during a session ([ipfs.github.io][5])"
  guidance:
  \- Tune in resource‑constrained environments to cap network load.
  \- Changes must precede `createHelia`; constants are read at init time.
  example:
  code: |
  import { DEFAULT\_SESSION\_MAX\_PROVIDERS } from 'helia'
  console.log('session provider cap =', DEFAULT\_SESSION\_MAX\_PROVIDERS)
  lang: javascript
  DEFAULT\_SESSION\_MIN\_PROVIDERS:
  kind: constant
  summary: "Minimum providers before a session is considered saturated ([ipfs.github.io][5])"
  guidance:
  \- Raise for high‑availability retrieval workloads.
  \- Coupled with the max constant – maintain logical ordering (min ≤ max).
  example:
  code: |
  import { DEFAULT\_SESSION\_MIN\_PROVIDERS } from 'helia'
  console.log('session provider floor =', DEFAULT\_SESSION\_MIN\_PROVIDERS)
  lang: javascript

* name: errors
  exports: \[InsufficientProvidersError, NoRoutersAvailableError]
  symbols:
  InsufficientProvidersError:
  kind: class
  summary: "Thrown when too few providers are found for a block ([ipfs.github.io][5])"
  guidance:
  \- Catch to fallback to alternate retrieval strategies (e.g. gateways).
  \- Often indicates overly strict provider caps or poor connectivity.
  example:
  code: |
  try {
  await helia.blockstore.get(cid)
  } catch (err) {
  if (err instanceof InsufficientProvidersError) {
  console.warn('falling back to gateway fetch…')
  }
  }
  lang: javascript
  NoRoutersAvailableError:
  kind: class
  summary: "Indicates the routing stack has no active routers ([ipfs.github.io][5])"
  guidance:
  \- Ensure at least one router (e.g., DHT) is enabled in libp2p config.
  \- For offline nodes, pre‑load desired CIDs before disconnecting.
  example:
  code: |
  await createHelia({ libp2p: { services: {} } })
  // => throws NoRoutersAvailableError
  lang: javascript

* name: types
  exports: \[Helia]
  symbols:
  Helia:
  kind: type
  summary: "TypeScript interface describing a Helia node’s capabilities ([ipfs.github.io][5])"
  guidance:
  \- Use generics `Helia<YourLibp2p>` to expose custom libp2p services.
  \- Provides high‑level helpers: `blockstore`, `gc`, `pins`, `add`, `cat`.
  example:
  code: |
  import type { Helia } from 'helia'
  function useHelia(node: Helia) {
  return node.blockstore
  }
  lang: typescript

common\_workflows:

* title: Add & retrieve a file via UnixFS
  steps:

  * `const helia = await createHelia()`
  * `const fs = unixfs(helia)`
  * `const cid = await fs.addBytes(new TextEncoder().encode('hello'))`
  * `const data = uint8ArrayConcat(await fs.cat(cid))`

external\_resources:

* label: Helia API Docs
  url: [https://ipfs.github.io/helia/modules/helia.html](https://ipfs.github.io/helia/modules/helia.html)
* label: Helia 101 tutorial
  url: [https://github.com/ipfs-examples/helia-101](https://github.com/ipfs-examples/helia-101)

[1]: https://www.npmjs.com/package/helia "helia - npm"
[2]: https://ipfs.github.io/helia/functions/helia.createHelia.html "createHelia | Helia"
[3]: https://ipfs.github.io/helia/functions/helia.heliaDefaults.html "heliaDefaults | Helia"
[4]: https://ipfs.github.io/helia/functions/helia.libp2pDefaults.html "libp2pDefaults | Helia"
[5]: https://ipfs.github.io/helia/modules/helia.html "helia | Helia"

