meta:
spec\_name: geth/clef
spec\_version: "0.3.0"
generated: "2025-09-18"
library\_version: "^6.0.0"
language: "http+jsonrpc"
tags: \[ethereum, signer, jsonrpc, security, clef]
purpose: >
Teach an LLM to drive the Clef account-signer over JSON‑RPC (External API) and to
implement/communicate with a Clef UI process over stdio RPC (Internal UI API), covering
account lifecycle, transaction/data signing (incl. EIP‑712), and UX/approval flows.
guiding\_principles:
\- Treat the External API as **untrusted**; approvals and passwords travel only on the trusted stdio UI channel.&#x20;
\- All numbers and byte arrays are **hex‑encoded** and must be `0x`‑prefixed; prefer `"data"` over `"input"` (Clef will normalize to `data`). &#x20;
\- For `account_signTransaction`, include a correct checksum address and (optionally) the ABI **method signature** to aid decoding; mismatches surface as UI warnings. &#x20;
\- Use `account_signTypedData` for EIP‑712; pass a canonical `types`, `domain`, `primaryType`, and `message` object.&#x20;
\- Use `ui_onApprovedTx` to track ratelimits/auditing **after** a signing completes rather than scraping `ui_approveTx`.&#x20;
\- Expect **delays or no response** on External API calls if the user ignores confirmations; design callers with timeouts/retries.&#x20;
\- Verify Clef API versions at startup (`intapi` and `extapi`) and gate features like Gnosis Safe signing (added in 6.1.0). &#x20;
design\_notes: >
Contract definitions were distilled from the authoritative Clef docs embedded in the provided
repository, using the External API and UI API sections (arguments, sample calls, and changelogs).
We annotate guidance with the exact call semantics (hex encoding, ABI hints) and operational
cautions (untrusted external surface, notification semantics). Version anchors use startup logs
showing `extapi_version 6.0.0` and changelog entries for 6.1.0’s Safe support. &#x20;

groups:

* name: Clef External API (JSON‑RPC)
  exports:

  * account\_new
  * account\_list
  * account\_signTransaction
  * account\_signData
  * account\_signTypedData
  * account\_ecRecover
  * account\_version
  * account\_signGnosisSafeTx
    symbols:
    account\_new:
    kind: function
    summary: Create a new password‑protected account; returns the derived address.&#x20;
    definition:
    lang: typescript
    source: combined.md / External API
    code: |
    // JSON-RPC 2.0
    // method: "account\_new"
    // params: \[]
    // result: address (string, 0x-prefixed, EOA)
    type AccountNew = {
    method: "account\_new";
    params: \[];
    result: string; // address
    };
    guidance:

    * This call requires user approval via the UI channel; design the caller to wait for interactive consent.&#x20;
    * Back up the keystore; lost keys cannot be recovered.&#x20;
      example:
      lang: bash
      code: |
      curl -s [http://localhost:8550](http://localhost:8550)&#x20;
      -H 'Content-Type: application/json'&#x20;
      -d '{"jsonrpc":"2.0","id":1,"method":"account\_new","params":\[]}'
      since: "1.0.0"
      account\_list:
      kind: function
      summary: List addresses managed by Clef.&#x20;
      definition:
      lang: typescript
      source: combined.md / External API
      code: |
      // method: "account\_list"
      // params: \[]
      // result: string\[] of addresses
      type AccountList = {
      method: "account\_list";
      params: \[];
      result: string\[];
      };
      guidance:
    * Expect an approval prompt in the UI; callers should handle rejection (`-32000 Request denied`).&#x20;
    * This endpoint deliberately avoids exposing local URLs/paths—only addresses are returned.&#x20;
      example:
      lang: bash
      code: |
      curl -s [http://localhost:8550](http://localhost:8550)&#x20;
      -H 'Content-Type: application/json'&#x20;
      -d '{"jsonrpc":"2.0","id":2,"method":"account\_list","params":\[]}'
      account\_signTransaction:
      kind: function
      summary: Sign a transaction; returns RLP (`raw`) and a JSON view (`tx`).&#x20;
      definition:
      lang: typescript
      source: combined.md / External API
      code: |
      // method: "account\_signTransaction"
      // params: \[ tx: {
      //   from: address; to?: address|null; gas: hex; gasPrice: hex;
      //   value?: hex; data?: hex; nonce: hex; input?: hex (alias)
      // }, methodSignature?: string ]
      // result: { raw: hex; tx: { ...signed fields... } }
      interface SignTxParamsTx {
      from: string; to?: string|null; gas: string; gasPrice: string;
      value?: string; data?: string; input?: string; nonce: string;
      }
      type AccountSignTransaction = {
      method: "account\_signTransaction";
      params: \[SignTxParamsTx, (string? /\* e.g., "transfer(uint256,address)" \*/)];
      result: { raw: string; tx: Record\<string, unknown> };
      };
      guidance:
    * If provided, the `methodSignature` helps decode calldata; Clef treats it as **untrusted** and only for UX.&#x20;
    * Supply checksum‑correct addresses; the UI surfaces warnings on invalid checksums or ABI mismatches.&#x20;
    * Prefer `data` (Clef normalizes `input`→`data`); if both are set they must be identical.&#x20;
      example:
      lang: bash
      code: |
      curl -s [http://localhost:8550](http://localhost:8550)&#x20;
      -H 'Content-Type: application/json'&#x20;
      -d '{
      "jsonrpc":"2.0","id":3,
      "method":"account\_signTransaction",
      "params":\[
      {"from":"0x1923f626bb8dc025849e00f99c25fe2b2f7fb0db",
      "to":"0x07a565b7ed7d7a678680a4c162885bedbb695fe0",
      "gas":"0x55555","gasPrice":"0x1234","value":"0x1234","nonce":"0x0","data":"0xabcd"}
      ]}'
      account\_signData:
      kind: function
      summary: Sign a data blob with a specified content type (EIP‑191/validator/clique/plain).&#x20;
      definition:
      lang: typescript
      source: combined.md / External API
      code: |
      // method: "account\_signData"
      // params: \[contentType: "text/validator" | "application/clique" | "text/plain",
      //          account: address, data: hex]
      // result: signature (hex)
      type AccountSignData = {
      method: "account\_signData";
      params: \[string, string, string];
      result: string;
      };
      guidance:
    * Use `text/plain` with `account_ecRecover` to verify signatures.&#x20;
    * Pass canonical hex data (0x‑prefixed); ensure the user explicitly approves the signing intent.&#x20;
      example:
      lang: bash
      code: |
      curl -s [http://localhost:8550](http://localhost:8550)&#x20;
      -H 'Content-Type: application/json'&#x20;
      -d '{"jsonrpc":"2.0","id":4,"method":"account\_signData",
      "params":\["data/plain","0x1923f626bb8dc025849e00f99c25fe2b2f7fb0db","0xaabbccdd"]}'
      account\_signTypedData:
      kind: function
      summary: Sign EIP‑712 typed data (domain/primaryType/types/message).&#x20;
      definition:
      lang: typescript
      source: combined.md / External API
      code: |
      // method: "account\_signTypedData"
      // params: \[account: address, typedData: EIP712TypedData]
      // result: signature (hex)
      interface EIP712TypedData { types: any; domain: any; primaryType: string; message: any; }
      type AccountSignTypedData = {
      method: "account\_signTypedData";
      params: \[string, EIP712TypedData];
      result: string;
      };
      guidance:
    * Ensure `types.EIP712Domain` and `primaryType` align; mismatches yield invalid signatures.&#x20;
    * Keep field casing/types exact to avoid silent user‑side rejections.&#x20;
      example:
      lang: bash
      code: |
      curl -s [http://localhost:8550](http://localhost:8550)&#x20;
      -H 'Content-Type: application/json'&#x20;
      -d @typedData.json&#x20;
      \| jq .
      account\_ecRecover:
      kind: function
      summary: Recover the address from a `text/plain` signed payload and signature.&#x20;
      definition:
      lang: typescript
      source: combined.md / External API
      code: |
      // method: "account\_ecRecover"
      // params: \[data: hex, signature: hex]
      // result: address
      type AccountEcRecover = {
      method: "account\_ecRecover";
      params: \[string, string];
      result: string;
      };
      guidance:
    * Pair with `account_signData("text/plain", ...)` for testable round‑trips.&#x20;
    * Validate the recovered address equals the signer before trusting.&#x20;
      example:
      lang: bash
      code: |
      curl -s [http://localhost:8550](http://localhost:8550)&#x20;
      -H 'Content-Type: application/json'&#x20;
      -d '{"jsonrpc":"2.0","id":5,"method":"account\_ecRecover",
      "params":\["0xaabbccdd","0x<sig>"]}'
      account\_version:
      kind: function
      summary: Return the Clef External API version (semantic version string).&#x20;
      definition:
      lang: typescript
      source: combined.md / External API
      code: |
      // method: "account\_version"
      // params: \[]
      // result: "MAJOR.MINOR.PATCH"
      type AccountVersion = {
      method: "account\_version";
      params: \[];
      result: string;
      };
      guidance:
    * Gate feature flags (e.g., Safe signing) by `account_version`.&#x20;
    * Log both `extapi` and `intapi` at startup for diagnostics.&#x20;
      example:
      lang: bash
      code: |
      curl -s [http://localhost:8550](http://localhost:8550)&#x20;
      -H 'Content-Type: application/json'&#x20;
      -d '{"jsonrpc":"2.0","id":6,"method":"account\_version","params":\[]}'
      account\_signGnosisSafeTx:
      kind: function
      summary: Sign a Gnosis Safe transaction object; returns an EIP‑712‑compatible signature bundle.&#x20;
      definition:
      lang: typescript
      source: combined.md / External API changelog 6.1.0
      code: |
      // method: "account\_signGnosisSafeTx"
      // params: \[ownerAddress: address, safeTx: object as exported by Gnosis relay]
      // result: signature (hex) and/or relay-importable payload (per implementation)
      type AccountSignGnosisSafeTx = {
      method: "account\_signGnosisSafeTx";
      params: \[string, Record\<string, any>];
      result: any;
      };
      guidance:
    * Provide `safeTx` exactly as exported by the Gnosis relay; fields like `safeTxHash` must match the Safe’s EIP‑712 schema.&#x20;
    * Not all listed fields are required; this helper focuses on EIP‑712‑conformant UX for relays.&#x20;
      example:
      lang: bash
      code: |
      curl -s [http://localhost:8550](http://localhost:8550)&#x20;
      -H 'Content-Type: application/json'&#x20;
      -d '{"jsonrpc":"2.0","id":7,"method":"account\_signGnosisSafeTx",
      "params":\["0xfd1c4226bfD1c436672092F4eCbfC270145b7256",{"safe":"0x...","to":"0x...","safeTxGas":27845,"nonce":2}] }'
      since: "6.1.0"

* name: Clef Internal UI API (stdio RPC)
  exports:

  * ui\_approveTx
  * ui\_approveListing
  * ui\_approveSignData
  * ui\_approveNewAccount
  * ui\_onApprovedTx
  * ui\_onSignerStartup
  * ui\_onInputRequired
  * ui\_showInfo
  * ui\_showError
    symbols:
    ui\_approveTx:
    kind: function
    summary: UI prompt for transaction approval; returns `approved` and possibly a modified `transaction`.&#x20;
    definition:
    lang: typescript
    source: combined.md / UI API
    code: |
    // method: "ui\_approveTx"
    // params: \[{ transaction: {from,to,gas,gasPrice,value,nonce,data?}, call\_info: Info\[], meta: Meta }]
    // returns: { approved: boolean, transaction?: ... }
    interface Info { type: string; message: string; }
    interface Meta { remote: string; local: string; scheme: string; \[k: string]: string; }
    type UIApproveTx = {
    method: "ui\_approveTx";
    params: \[ { transaction: Record\<string, any>, call\_info?: Info\[], meta?: Meta } ];
    result: { approved: boolean, transaction?: Record\<string, any> };
    };
    guidance:

    * Surface checksum and ABI warnings clearly; invalid data should bias toward rejection.&#x20;
    * On approve, return the **full** (possibly edited) transaction back.&#x20;
      example:
      lang: json
      code: |
      {"jsonrpc":"2.0","id":1,"method":"ui\_approveTx","params":\[{"transaction":{"from":"0x...","to":"0x...","gas":"0x333","gasPrice":"0x1","nonce":"0x0","data":"0x..."}, "call\_info":\[{"type":"WARNING","message":"Invalid checksum on to-address"}], "meta":{"remote":"127.0.0.1:48","local":"localhost:8550","scheme":"HTTP/1.1"}}]}
      since: "5.0.0"
      ui\_approveListing:
      kind: function
      summary: UI prompt to approve which accounts may be listed to the external caller.&#x20;
      definition:
      lang: typescript
      source: combined.md / UI API
      code: |
      // method: "ui\_approveListing"
      // params: \[{ accounts: {address\:string,url\:string}\[], meta: Meta }]
      // returns: { approved: boolean, accounts?: string\[] }
      type UIApproveListing = {
      method: "ui\_approveListing";
      params: \[ { accounts: {address\:string,url\:string}\[], meta?: Record\<string,string> } ];
      result: { approved: boolean, accounts?: string\[] };
      };
      guidance:
    * Allow selective disclosure: only return addresses you intend to expose to the requester.&#x20;
    * Treat `meta` origin info as **untrusted** hints only.&#x20;
      example:
      lang: json
      code: |
      {"jsonrpc":"2.0","id":5,"method":"ui\_approveListing","params":\[{"accounts":\[{"address":"0x...","url":"keystore://..."}],"meta":{"remote":"signer binary","local":"main","scheme":"in-proc"}}]}
      since: "5.0.0"
      ui\_approveSignData:
      kind: function
      summary: UI prompt to approve signing of messages (incl. EIP‑191/EIP‑712 canonicalized `messages`).&#x20;
      definition:
      lang: typescript
      source: combined.md / UI API
      code: |
      // method: "ui\_approveSignData"
      // params: \[{ address: string, raw\_data: hex, messages: {name\:string,type\:string,value\:string}\[], hash?: hex, meta?: Meta }]
      // returns: { approved: boolean }
      type UIApproveSignData = {
      method: "ui\_approveSignData";
      params: \[ { address\:string, raw\_data\:string, messages\:any, hash?\:string, meta?\:Record\<string,string> } ];
      result: { approved: boolean };
      };
      guidance:
    * Display the fully canonicalized message list; pay attention to `messages[]` (renamed from `message` in intapi 7.0.0).&#x20;
    * Never echo passwords or secrets back over this channel.&#x20;
      example:
      lang: json
      code: |
      {"jsonrpc":"2.0","id":4,"method":"ui\_approveSignData","params":\[{"address":"0x...","raw\_data":"0x01020304","messages":\[{"name":"message","type":"text/plain","value":"\u0019Ethereum Signed Message:\n4\u0001\u0002\u0003\u0004"}]}]}
      since: "5.0.0"
      ui\_approveNewAccount:
      kind: function
      summary: UI prompt to approve creation of a new account.&#x20;
      definition:
      lang: typescript
      source: combined.md / UI API
      code: |
      // method: "ui\_approveNewAccount"
      // params: \[{ meta?: Meta }]
      // returns: { approved: boolean }
      type UIApproveNewAccount = {
      method: "ui\_approveNewAccount";
      params: \[ { meta?: Record\<string,string> } ];
      result: { approved: boolean };
      };
      guidance:
    * Warn users about backup responsibilities for new keys.&#x20;
      example:
      lang: json
      code: |
      {"jsonrpc":"2.0","id":4,"method":"ui\_approveNewAccount","params":\[{"meta":{"remote":"signer binary","local":"main","scheme":"in-proc"}}]}
      since: "5.0.0"
      ui\_onApprovedTx:
      kind: function
      summary: Notification fired after a transaction is approved/signed; for UI/rules bookkeeping only.&#x20;
      definition:
      lang: typescript
      source: combined.md / UI API
      code: |
      // method: "ui\_onApprovedTx" (JSON-RPC notification; no response expected)
      // params: \[{ raw: hex, tx: {...} }]
      type UIOnApprovedTx = {
      method: "ui\_onApprovedTx";
      params: \[ { raw\:string, tx\:Record\<string,any> } ];
      result: void; // notification
      };
      guidance:
    * Use this to implement rate‑limit counters; do not block or expect a response.&#x20;
      example:
      lang: json
      code: |
      {"jsonrpc":"2.0","method":"ui\_onApprovedTx","params":\[{"raw":"0x...","tx":{"nonce":"0x0","to":"0x..."}}]}
      since: "3.2.0"
      ui\_onSignerStartup:
      kind: function
      summary: Notification providing API versions and endpoints at signer startup.&#x20;
      definition:
      lang: typescript
      source: combined.md / UI API
      code: |
      // method: "ui\_onSignerStartup" (notification)
      // params: \[{ info: { extapi\_http?: string|null, extapi\_ipc?: string|null, extapi\_version: string, intapi\_version: string } }]
      type UIOnSignerStartup = {
      method: "ui\_onSignerStartup";
      params: \[ { info: Record\<string, string|null> } ];
      result: void;
      };
      guidance:
    * Capture and display versions to help UIs enable/disable features conditionally.&#x20;
      example:
      lang: json
      code: |
      {"jsonrpc":"2.0","method":"ui\_onSignerStartup","params":\[{"info":{"extapi\_http":"http\://localhost:8550","extapi\_version":"6.0.0","intapi\_version":"7.0.0"}}]}
      since: "3.2.0"
      ui\_onInputRequired:
      kind: function
      summary: Prompt the user for input (e.g., passwords) over the trusted channel.&#x20;
      definition:
      lang: typescript
      source: combined.md / UI API
      code: |
      // method: "ui\_onInputRequired"
      // params: \[{ title: string, prompt: string, isPassword: boolean }]
      // returns: { text: string }
      type UIOnInputRequired = {
      method: "ui\_onInputRequired";
      params: \[ { title\:string, prompt\:string, isPassword\:boolean } ];
      result: { text: string };
      };
      guidance:
    * Passwords are collected via this method; External API calls never carry credentials.&#x20;
      example:
      lang: json
      code: |
      {"jsonrpc":"2.0","id":1,"method":"ui\_onInputRequired","params":\[{"title":"Account password","prompt":"Please enter the password for account 0x...","isPassword"\:true}]}
      since: "2.1.0"
      ui\_showInfo:
      kind: function
      summary: Notification to display an informational message; no response expected.&#x20;
      definition:
      lang: typescript
      source: combined.md / UI API
      code: |
      // method: "ui\_showInfo" (notification)
      // params: \[ message: string ]
      type UIShowInfo = {
      method: "ui\_showInfo";
      params: \[ string ];
      result: void;
      };
      guidance:
    * Treat as fire‑and‑forget; do not block the signer.&#x20;
      example:
      lang: json
      code: |
      {"jsonrpc":"2.0","method":"ui\_showInfo","params":\["Tests completed"]}
      since: "3.2.0"
      ui\_showError:
      kind: function
      summary: Notification to display an error message; no response expected.&#x20;
      definition:
      lang: typescript
      source: combined.md / UI API
      code: |
      // method: "ui\_showError" (notification)
      // params: \[ message: string ]
      type UIShowError = {
      method: "ui\_showError";
      params: \[ string ];
      result: void;
      };
      guidance:
    * Use for non‑confirmable alerts that must not stall the approval pipeline.&#x20;
      example:
      lang: json
      code: |
      {"jsonrpc":"2.0","method":"ui\_showError","params":\["Something bad happened!"]}
      since: "3.2.0"

common\_workflows:

* title: Sign a transaction end‑to‑end (External API + UI)
  steps:

  * Start Clef with UI channel enabled (e.g., `--stdio-ui`), verify `extapi`/`intapi` versions in startup info.&#x20;
  * Call `account_signTransaction` with `from`, `to`, gas/price, nonce, and `data` (prefer `data` over `input`). &#x20;
  * Optionally supply `methodSignature` to aid UI decoding; user inspects warnings and approves.&#x20;
  * Receive `{ raw, tx }` on success; broadcast `raw` to the chain.&#x20;
* title: EIP‑712 typed data signing
  steps:

  * Construct a canonical typed data payload with `types`, `domain`, `primaryType`, `message`.&#x20;
  * Invoke `account_signTypedData` with the signer address and payload; store the signature.&#x20;
* title: Verify a plain‑text signature
  steps:

  * Sign with `account_signData("text/plain", addr, dataHex)`.&#x20;
  * Verify with `account_ecRecover(dataHex, signature)`; compare to `addr`.&#x20;
* title: Implement the minimal UI handshake
  steps:

  * Launch Clef with `--stdio-ui`; on startup, handle `ui_onSignerStartup` to read versions/endpoints.&#x20;
  * Implement `ui_approveTx`, `ui_approveSignData`, and `ui_onInputRequired` to mediate user approvals/passwords. &#x20;
  * Listen for `ui_onApprovedTx` notifications for audit/ratelimiting.&#x20;
* title: Diagnose ABI or checksum issues surfaced in UI
  steps:

  * If the UI warns about invalid checksum or ABI mismatch, re‑encode the address and calldata with the correct signature.&#x20;
  * Re‑submit the `account_signTransaction` request after fixing inputs.&#x20;
* title: Enable Gnosis Safe signing (6.1.0+)
  steps:

  * Check `account_version` ≥ 6.1.0. &#x20;
  * Call `account_signGnosisSafeTx(address, safeTx)` with the relay‑exported object.&#x20;

troubleshooting\_cheatsheet:

* symptom: JSON-RPC error `-32000 Request denied`
  cause: User rejected the approval in the UI (External API is untrusted and requires consent).
  fix: Present context better; retry only on explicit user action.&#x20;
* symptom: UI shows “Invalid checksum on to-address”
  cause: Address not in EIP‑55 checksum format or case mismatch.
  fix: Recompute checksum address and resend; show ABI‑decoded fields to the user.&#x20;
* symptom: UI warning “Transaction data did not match ABI-interface”
  cause: Calldata and supplied `methodSignature` disagree (extra/missing bytes).
  fix: Re‑encode calldata for the given signature or remove the signature hint.&#x20;
* symptom: Node logs `nonce too high` or `transaction type not supported` during offline t8n tests
  cause: Using presigned txs on older forks or wrong nonce ordering.
  fix: Use presigned txs for Berlin or bump/align nonces; sign with a compatible fork.&#x20;

faq:

* q: Should I use `data` or `input` in transaction objects?
  a: Prefer `data`. If both are present they must be identical; Clef normalizes to `data` when passing structs to the UI.&#x20;
* q: What’s the difference between External API and UI API?
  a: External API is untrusted (no credentials, user may ignore); UI API over stdio is trusted and used for approvals/passwords and notifications.&#x20;
* q: How do I know which features are available?
  a: Check `account_version` and the startup `ui_onSignerStartup` notification (`extapi_version`, `intapi_version`) to gate features like Safe signing. &#x20;

