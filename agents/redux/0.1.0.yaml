meta:
spec\_name: redux
spec\_version: "0.1.0"
generated: "2025-07-28"
purpose: >
Enable any large‑language model to guide developers in building robust,
modern Redux applications by providing concise, authoritative knowledge of
the core API, recommended patterns, and common workflows.
guiding\_principles:
\- Prefer Redux Toolkit (`configureStore`) for new code but understand legacy APIs.
\- Keep state and actions serialisable to maximise debugging and tooling value.
\- Write reducers as pure functions—no side‑effects or async logic inside.
\- Co‑locate logic: slice reducers, actions, and selectors live together.
\- Use middleware for all async and side‑effectful flows; never inside reducers.
design\_notes: >
Symbols were selected from the Redux type definitions most relevant to daily
development. Low‑level inference helper types were omitted for brevity.
Examples use ES Modules and TypeScript 5.x syntax. Key sources: Redux docs
(v5.0), Redux Toolkit docs, and the `redux` npm package type declarations.

groups:

* name: Actions
  exports:

  * Action
  * ActionCreator
  * ActionCreatorsMapObject
  * AnyAction
  * UnknownAction
    symbols:
    Action:
    summary: A plain object that signals an intention to mutate state.
    guidance:

    * Always include a string `type`; keep payload small and serialisable.
    * Define `type` constants (`export const ADD_TODO = 'todo/add'`) to avoid typos.
      example: |
      import type { Action } from 'redux';

    export const INCREMENT = 'counter/increment';

    const increment: Action<typeof INCREMENT> = { type: INCREMENT };
    ActionCreator:
    summary: Function factory that returns an Action object.
    guidance:

    * Pure action creators have no side‑effects; side‑effectful creators should return thunks.
    * Co‑locate creators with the slice that consumes them for clarity.
      example: |
      import type { ActionCreator } from 'redux';
      import { INCREMENT } from './constants';

    export const increment: ActionCreator<{ type: typeof INCREMENT }> =
    () => ({ type: INCREMENT });
    ActionCreatorsMapObject:
    summary: Object map whose values are ActionCreator functions.
    guidance:

    * Combine related creators into a single map for easy binding.
    * Avoid mixing thunk and plain creators in one map to keep types clear.
      example: |
      import { increment } from './actions';

    export const counterActions = { increment };
    AnyAction:
    summary: Action type with arbitrary additional fields (legacy).
    guidance:

    * Prefer narrower `Action` or custom interfaces for safer typing.
    * Useful when migrating JavaScript codebases where action shape varies widely.
      example: |
      import type { AnyAction } from 'redux';

    const noisy: AnyAction = { type: 'log', level: 'info', msg: 'Hi' };
    UnknownAction:
    summary: Type‑safe version of AnyAction where extra props are `unknown`.
    guidance:

    * Use in generic utilities where the action’s exact shape is not known.
    * Guards like `isAction` help refine UnknownAction to specific variants.
      example: |
      import type { UnknownAction } from 'redux';

    function isPing(a: UnknownAction): a is { type: 'ping' } {
    return a.type === 'ping';
    }

* name: Dispatch & Middleware
  exports:

  * Dispatch
  * Middleware
  * MiddlewareAPI
  * applyMiddleware
  * bindActionCreators
    symbols:
    Dispatch:
    summary: Function that sends an action (or thunk) to the store.
    guidance:

    * Always return the dispatched action to enable promise chaining when using thunks.
    * Treat `dispatch` as an opaque function—do not assume synchronous behaviour.
      example: |
      import { createStore } from 'redux';
      import type { Dispatch } from 'redux';

    const store = createStore(reducer);
    const dispatch: Dispatch = store.dispatch;

    dispatch({ type: 'ping' });
    Middleware:
    summary: Higher‑order function that enhances dispatch for side‑effects.
    guidance:

    * Compose multiple middlewares with `applyMiddleware` in order—logging first, async later.
    * Keep middleware pure except for intentional side‑effects (e.g., logging, analytics).
      example: |
      import type { Middleware } from 'redux';

    export const logger: Middleware = api => next => action => {
    console.log('dispatching', action);
    return next(action);
    };
    MiddlewareAPI:
    summary: Store‑like interface exposed to middleware (`dispatch`, `getState`).
    guidance:

    * Do **not** mutate state inside middleware; use provided `dispatch` to trigger changes.
    * Cache `getState()` calls to avoid redundant reads during large action chains.
      example: |
      import type { MiddlewareAPI } from 'redux';

    const peekState = (api: MiddlewareAPI) => {
    console.debug('current', api.getState());
    };
    applyMiddleware:
    summary: Store enhancer that installs a middleware chain.
    guidance:

    * Always pass `applyMiddleware` first when composing multiple enhancers.
    * Keep middleware order stable to prevent subtle behavioural changes.
      example: |
      import { createStore, applyMiddleware } from 'redux';
      import { thunk } from 'redux-thunk';
      import { logger } from './logger';

    const store = createStore(rootReducer, applyMiddleware(logger, thunk));
    bindActionCreators:
    summary: Wraps ActionCreators so they auto‑dispatch to a given store.
    guidance:

    * Use inside `connect` or React hooks (`useDispatch`) to avoid verbose dispatch calls.
    * Beware of unnecessary re‑creation—memoise or bind once per component.
      example: |
      import { bindActionCreators } from 'redux';
      import { increment } from './actions';
      import { store } from './store';

    const { incrementAndDispatch } = bindActionCreators(
    { incrementAndDispatch: increment },
    store.dispatch
    );

* name: Reducers
  exports:

  * Reducer
  * combineReducers
  * ReducersMapObject
    symbols:
    Reducer:
    summary: Pure function `(state, action) → newState`.
    guidance:

    * Never mutate `state`; return new objects (use immer or spread).
    * Provide a sensible initial state when `state === undefined`.
      example: |
      import type { Reducer } from 'redux';

    interface CounterState { value: number }
    const initial: CounterState = { value: 0 };

    export const counter: Reducer<CounterState> = (state = initial, action) => {
    if (action.type === 'counter/increment') return { value: state.value + 1 };
    return state;
    };
    combineReducers:
    summary: Utility to merge slice reducers into one root reducer.
    guidance:

    * Keys of the map define the shape of the global state object.
    * Validate that every slice handles unknown actions by returning its current state.
      example: |
      import { combineReducers } from 'redux';
      import { counter } from './counter';
      import { todos } from './todos';

    export const rootReducer = combineReducers({ counter, todos });
    ReducersMapObject:
    summary: Type describing the object passed to `combineReducers`.
    guidance:

    * Use for generically typed helper functions that operate on reducer maps.
    * Often inferred automatically; explicit annotation rarely needed.
      example: |
      import type { ReducersMapObject } from 'redux';
      import { counter } from './counter';

    const map: ReducersMapObject = { counter };

* name: Store
  exports:

  * Store
  * createStore
  * legacy\_createStore
  * StoreEnhancer
    symbols:
    Store:
    summary: Holds state, allows dispatching actions and subscribing to changes.
    guidance:

    * Prefer a single store per app; split logic via reducers, not multiple stores.
    * Avoid calling `getState()` inside components—use selectors and subscribe methods.
      example: |
      import type { Store } from 'redux';
      import { createStore } from 'redux';

    const store: Store = createStore(rootReducer);
    console.log(store.getState());
    createStore:
    summary: Factory that creates a Store instance (legacy, see Redux Toolkit).
    guidance:

    * In new codebases use `configureStore` from Redux Toolkit for better defaults.
    * Pass `applyMiddleware` and other enhancers as the last argument.
      example: |
      import { createStore, applyMiddleware } from 'redux';
      import { logger } from './logger';

    const store = createStore(rootReducer, applyMiddleware(logger));
    legacy\_createStore:
    summary: Alias to suppress deprecation warnings when using core Redux alone.
    guidance:

    * Use only when migration to Redux Toolkit is not feasible.
    * Functionally identical to `createStore`.
      example: |
      import { legacy\_createStore as createStore } from 'redux';

    const store = createStore(rootReducer);
    StoreEnhancer:
    summary: Higher‑order function that extends Store behaviour.
    guidance:

    * Compose multiple enhancers with `compose`—order matters.
    * Use enhancer libraries (e.g., Redux DevTools) rather than writing your own.
      example: |
      import { createStore } from 'redux';
      import { composeWithDevTools } from '@redux-devtools/extension';

    const store = createStore(rootReducer, composeWithDevTools());

* name: Utilities
  exports:

  * compose
  * isPlainObject
  * isAction
  * Observable
  * Observer
  * Unsubscribe
    symbols:
    compose:
    summary: Right‑to‑left function composition helper.
    guidance:

    * Commonly used to compose enhancers: `compose(applyMiddleware(...), devTools())`.
    * Ensure composed functions accept exactly one argument unless last in chain.
      example: |
      import { compose } from 'redux';

    const add  = (x: number) => x + 1;
    const dbl  = (x: number) => x \* 2;

    const addThenDouble = compose(dbl, add);
    console.log(addThenDouble(3)); // 8
    isPlainObject:
    summary: Runtime helper to detect serialisable plain objects.
    guidance:

    * Use before dispatching data from third‑party libraries to ensure compatibility.
    * Falls back to strict prototype checks—functions and arrays return false.
      example: |
      import { isPlainObject } from 'redux';

    console.log(isPlainObject({ a: 1 })); // true
    isAction:
    summary: Type predicate narrowing unknown values to `Action`.
    guidance:

    * Guards unsafe input (e.g., from WebSockets) before passing to reducers.
    * Works by checking for a string `type` field.
      example: |
      import { isAction } from 'redux';

    const maybe = JSON.parse(msg);
    if (isAction(maybe)) dispatch(maybe);
    Observable:
    summary: Minimal observable interface for store change streams.
    guidance:

    * Integrates easily with libraries like RxJS via `from(store)`.
    * Unsubscribe promptly to avoid memory leaks in long‑lived apps.
      example: |
      import { store } from './store';
      const obs = store as unknown as Observable<any>;
      const sub = obs.subscribe({ next: state => console.log(state) });
      Observer:
      summary: Consumer object for an Observable’s `next` emissions.
      guidance:
    * Implement both `next` and optional `error`/`complete` for full contract support.
    * Prefer strongly typed `Observer<State>` for state change handling.
      example: |
      import type { Observer } from 'redux';

    const logState: Observer<any> = { next: s => console.log(s) };
    Unsubscribe:
    summary: Function that removes a previously added listener.
    guidance:

    * Always store and call the return of `store.subscribe` during unmount.
    * Calling multiple times is safe but has no additional effect.
      example: |
      const unsubscribe: Unsubscribe = store.subscribe(render);
      window\.addEventListener('unload', unsubscribe);

common\_workflows:

* title: Configure a store with middleware and DevTools
  steps:

  * Write slice reducers and combine them with `combineReducers`.
  * Implement middleware (e.g., logger, thunk).
  * Call `createStore(rootReducer, compose(applyMiddleware(...), devTools()))`.
  * Export the store for use in React context or other frameworks.
* title: Dispatch async logic with thunk middleware
  steps:

  * Install `redux-thunk` and add it to `applyMiddleware`.
  * Write an action creator that returns `async (dispatch, getState) => {}`.
  * Inside, await API calls and dispatch normal actions with the results.
  * Test using mocked dispatch functions for unit safety.

troubleshooting\_cheatsheet:

* symptom: "Actions appear in DevTools but state never changes"
  cause:   "Reducer returned previous state object or had side‑effects causing errors"
  fix:     "Ensure reducer is pure and returns new state for handled actions"
* symptom: "Cannot dispatch during dispatch"
  cause:   "Middleware or reducer synchronously dispatched a new action"
  fix:     "Move nested dispatch into a thunk or setTimeout to next tick"

faq:

* q: "Should I still use Redux in 2025?"
  a: "Yes—when you need global, predictable state or integrate with non‑React code. For simple component state, React context or signals may suffice."
* q: "Why prefer Redux Toolkit over core Redux?"
  a: "RTK provides opinionated defaults (Immer, Thunks, DevTools) that eliminate boilerplate and common mistakes."
* q: "Can I have multiple stores?"
  a: "Technically yes, but it complicates dev‑tools and cross‑slice coordination—prefer a single store."

external\_resources:

* label: Redux Core Documentation
  url: [https://redux.js.org/](https://redux.js.org/)
* label: Redux Toolkit Documentation
  url: [https://redux-toolkit.js.org/](https://redux-toolkit.js.org/)
* label: Redux Essentials Tutorial (official)
  url: [https://redux.js.org/tutorials/essentials/part-1-overview-concepts](https://redux.js.org/tutorials/essentials/part-1-overview-concepts)

