meta:
spec\_name: react
spec\_version: "0.2.0"
library\_version: "^18.3.0"
generated: "2025-07-29"
language: javascript
homepage: [https://react.dev](https://react.dev)
tags: \[react, frontend, hooks, library]
purpose: >
Concise, actionable reference for React’s public API—hooks, helpers,
and core element factories—structured for LLM consumption and rapid
developer lookup.
guiding\_principles:
\- Emphasise practical usage patterns over exhaustive edge cases.
\- Keep summaries one‑line; move nuance into guidance bullets.
\- Provide runnable, import‑complete examples that compile in Create‑React‑App or Vite.
\- Highlight performance and foot‑gun notes (keys, memoisation, store subscriptions).
\- Cross‑reference related exports inside guidance to encourage discovery.
\- Prefer current idioms (ESM, function components, hooks) and mark legacy/deprecated APIs.
design\_notes: |
Source files: TypeScript declaration dump “react.out” plus upstream
README.  Exports grouped by everyday mental model: element factories,
component helpers, core hooks, performance hooks, and advanced hooks.
Each group ≤ 9 members for readability; examples avoid build‑tool‑
specific syntax.

groups:

* name: element-creation
  exports: \[createElement, cloneElement, Fragment]
  symbols:
  createElement:
  kind: function
  summary: Programmatically create a React element from type, props, and children.
  guidance:
  \- Prefer JSX (`<div />`) for readability—`createElement` is best for meta‑frameworks or dynamic factories.
  \- Always supply a stable `key` prop when creating elements inside arrays to preserve state between renders.
  example:
  code: |
  import React from 'react';

  ```
      const el = React.createElement(
        'button',
        { onClick: () => alert('Hi') },
        'Click me'
      );

      export default () => el;
  ```

  cloneElement:
  kind: function
  summary: Copy an existing element with new props and/or children.
  guidance:
  \- Use to inject refs or callbacks into children you don’t own (e.g., from `props.children`).
  \- Cloned elements keep the original `key`; pass a new `key` only when you intentionally want a new identity.
  example:
  code: |
  import { cloneElement } from 'react';

  ```
      function AddClass({ child }) {
        return cloneElement(child, { className: 'highlight' });
      }
  ```

  Fragment:
  kind: component
  summary: Group multiple children without adding an extra DOM node.
  guidance:
  \- Shorthand `<> ... </>` compiles to `React.Fragment`; use it freely except where keys are required.
  \- When mapping, supply `key` on the **Fragment** (`<Fragment key={id}>`) to avoid console warnings.
  example:
  code: |
  import { Fragment } from 'react';

  ```
      const List = ({ items }) => (
        <ul>
          {items.map((item) => (
            <Fragment key={item.id}>
              <li>{item.label}</li>
            </Fragment>
          ))}
        </ul>
      );
  ```

* name: component-helpers
  exports: \[Children, memo, forwardRef, lazy, Suspense]
  symbols:
  Children:
  kind: object
  summary: Utilities for safely iterating, counting, and cloning `props.children`.
  guidance:
  \- Use `Children.map(children, fn)` instead of raw `React.Children.map` when children may be singletons or fragments.
  \- Pair `Children.toArray` with keys to flatten and re‑key arbitrary children collections.
  example:
  code: |
  import { Children } from 'react';

  ```
      function Upper({ children }) {
        return Children.map(children, (c) =>
          typeof c === 'string' ? c.toUpperCase() : c
        );
      }
  ```

  memo:
  kind: function
  summary: Wrap a component to skip re‑render when props are shallow‑equal.
  guidance:
  \- Combine with `useCallback`/`useMemo` in parent components for end‑to‑end memoisation.
  \- Provide a custom equality function as the second argument when props include unstable values (e.g., functions).
  example:
  code: |
  import React, { memo } from 'react';

  ```
      const Row = memo(
        ({ item }) => <div>{item.text}</div>,
        (prev, next) => prev.item.id === next.item.id
      );

      export default Row;
  ```

  forwardRef:
  kind: function
  summary: Allow function components to expose a `ref` to their DOM node or imperative handle.
  guidance:
  \- Always pass `ref` to the underlying element; don’t call it conditionally.
  \- You can return custom methods via `useImperativeHandle` for imperative APIs.
  example:
  code: |
  import React, { forwardRef, useImperativeHandle, useRef } from 'react';

  ```
      const FancyInput = forwardRef((props, ref) => {
        const inputRef = useRef(null);
        useImperativeHandle(ref, () => ({
          focus: () => inputRef.current?.focus()
        }));
        return <input ref={inputRef} {...props} />;
      });
  ```

  lazy:
  kind: function
  summary: Code‑split a component at dynamic import boundaries.
  guidance:
  \- Must be rendered inside a `<Suspense>` fallback to handle loading state.
  \- Bundle‑splitting works well with route‑based components and heavy visualisations.
  example:
  code: |
  import { lazy, Suspense } from 'react';

  ```
      const Chart = lazy(() => import('./Chart'));

      export default function Dashboard() {
        return (
          <Suspense fallback={<p>Loading…</p>}>
            <Chart />
          </Suspense>
        );
      }
  ```

  Suspense:
  kind: component
  summary: Declarative boundary that handles loading states for lazy components and data.
  guidance:
  \- Nest boundaries to show granular fallbacks for different page regions.
  \- Combine with React 18 concurrent APIs (e.g., `startTransition`) for smoother UX.
  example:
  code: |
  import { Suspense } from 'react';
  import Profile from './Profile';

  ```
      export default () => (
        <Suspense fallback={<div>Fetching profile…</div>}>
          <Profile />
        </Suspense>
      );
  ```

* name: core-hooks
  exports: \[useState, useEffect, useContext, useReducer, useRef]
  symbols:
  useState:
  kind: hook
  summary: Manage local, reactive state inside function components.
  guidance:
  \- Initialise with a function (`useState(() => expensiveDefault())`) to defer calculation until mount.
  \- `setState` supports functional updates (`setCount(c => c + 1)`) to avoid stale closures.
  example:
  code: |
  import { useState } from 'react';

  ```
      export default function Counter() {
        const [count, setCount] = useState(0);
        return <button onClick={() => setCount(c => c + 1)}>{count}</button>;
      }
  ```

  useEffect:
  kind: hook
  summary: Side‑effect handler that runs after render.
  guidance:
  \- Declare every external dependency in the array; eslint‑plugin‑react‑hooks helps enforce correctness.
  \- Return a cleanup function to unsubscribe or clear timers when the component unmounts or dependencies change.
  example:
  code: |
  import { useEffect } from 'react';

  ```
      function Timer() {
        useEffect(() => {
          const id = setInterval(() => console.log('tick'), 1000);
          return () => clearInterval(id);
        }, []);
        return null;
      }
  ```

  useContext:
  kind: hook
  summary: Read the nearest current value of a React Context.
  guidance:
  \- Context updates cause every consuming component to re‑render; memoise provider value objects.
  \- Combine with `useMemo` or a state reducer at the Provider level to keep value stable.
  example:
  code: |
  import { createContext, useContext } from 'react';

  ```
      const Theme = createContext('light');

      function Button() {
        const theme = useContext(Theme);
        return <div className={theme}>Click</div>;
      }
  ```

  useReducer:
  kind: hook
  summary: State container alternative to `useState` with reducer semantics.
  guidance:
  \- Prefer for complex state transitions or when the next state depends on the previous.
  \- Lazily initialise with `useReducer(reducer, initArg, initFn)` to derive initial state.
  example:
  code: |
  import { useReducer } from 'react';

  ```
      function reducer(state, action) {
        switch (action.type) {
          case 'inc': return { count: state.count + 1 };
          default: return state;
        }
      }

      function Counter() {
        const [state, dispatch] = useReducer(reducer, { count: 0 });
        return <button onClick={() => dispatch({ type: 'inc' })}>{state.count}</button>;
      }
  ```

  useRef:
  kind: hook
  summary: Mutable container whose `.current` persists for the component’s lifetime.
  guidance:
  \- Store DOM nodes (`ref={myRef}`) or mutable values that don’t trigger re‑renders.
  \- Updates to `ref.current` are synchronous; wrap reads in `useLayoutEffect` to access post‑DOM‑paint values.
  example:
  code: |
  import { useRef, useEffect } from 'react';

  ```
      function FocusOnMount() {
        const inputRef = useRef(null);
        useEffect(() => inputRef.current?.focus(), []);
        return <input ref={inputRef} />;
      }
  ```

* name: performance-hooks
  exports: \[useCallback, useMemo, useLayoutEffect, useTransition, startTransition]
  symbols:
  useCallback:
  kind: hook
  summary: Memoise a callback to avoid unnecessary re‑creation between renders.
  guidance:
  \- Combine with `memo`‑ised children to prevent prop changes from causing re‑renders.
  \- Dependency array rules mirror `useEffect`; include every value referenced inside the callback.
  example:
  code: |
  import { useState, useCallback } from 'react';

  ```
      function ExpensiveList({ items }) {
        const [selected, setSelected] = useState(null);
        const handleSelect = useCallback((id) => setSelected(id), []);
        return items.map((i) => (
          <div key={i.id} onClick={() => handleSelect(i.id)}>{i.label}</div>
        ));
      }
  ```

  useMemo:
  kind: hook
  summary: Memoise expensive calculations, recomputing only when dependencies change.
  guidance:
  \- Return immutable data; mutating the value breaks memoisation contract.
  \- If the calculation is cheap, omit `useMemo` to avoid premature optimisation.
  example:
  code: |
  import { useMemo } from 'react';

  ```
      function Sorted({ list }) {
        const sorted = useMemo(() => [...list].sort(), [list]);
        return <pre>{JSON.stringify(sorted, null, 2)}</pre>;
      }
  ```

  useLayoutEffect:
  kind: hook
  summary: Synchronous effect that runs after DOM mutations but before the browser paints.
  guidance:
  \- Use only when you must measure layout or re‑position elements; otherwise favour `useEffect`.
  \- Blocks visual updates; keep logic small to avoid jank.
  example:
  code: |
  import { useLayoutEffect, useRef } from 'react';

  ```
      function Measure() {
        const box = useRef(null);
        useLayoutEffect(() => {
          console.log(box.current.getBoundingClientRect());
        }, []);
        return <div ref={box}>Measure me</div>;
      }
  ```

  useTransition:
  kind: hook
  since: "18.0.0"
  summary: Mark state updates as non‑urgent, enabling React to keep the UI responsive.
  guidance:
  \- Use inside large lists or auto‑complete filters where immediate visual feedback isn’t critical.
  \- Pair with `startTransition` when you need to trigger non‑urgent updates outside components.
  example:
  code: |
  import { useState, useTransition } from 'react';

  ```
      function Search({ items }) {
        const [isPending, startTransition] = useTransition();
        const [query, setQuery] = useState('');
        const results = items.filter((i) => i.includes(query));
        return (
          <>
            <input onChange={(e) => {
              const value = e.target.value;
              startTransition(() => setQuery(value));
            }} />
            {isPending ? 'Loading…' : results.join(', ')}
          </>
        );
      }
  ```

  startTransition:
  kind: function
  since: "18.0.0"
  summary: Imperative API to schedule a non‑urgent update block.
  guidance:
  \- Wrap state setters inside the callback to mark them low priority.
  \- Keep the callback synchronous; return value is ignored.
  example:
  code: |
  import { startTransition } from 'react';

  ```
      function updateFilter(setValue, value) {
        startTransition(() => setValue(value));
      }
  ```

* name: advanced-hooks
  exports: \[useSyncExternalStore, useId, useDeferredValue]
  symbols:
  useSyncExternalStore:
  kind: hook
  since: "18.0.0"
  summary: Subscribe to external mutable stores with consistent snapshots.
  guidance:
  \- Provide a `getSnapshot` that returns serialisable data to support concurrent rendering.
  \- Supply a stable `subscribe` function that calls the callback **after** the store mutates.
  example:
  code: |
  import { useSyncExternalStore } from 'react';

  ```
      const store = { value: 0, listeners: new Set() };
      const subscribe = (cb) => { store.listeners.add(cb); return () => store.listeners.delete(cb); };
      const getSnapshot = () => store.value;

      function Counter() {
        const value = useSyncExternalStore(subscribe, getSnapshot);
        return <span>{value}</span>;
      }
  ```

  useId:
  kind: hook
  since: "18.0.0"
  summary: Generate a unique, stable ID that works across server and client renders.
  guidance:
  \- Concatenate with a prefix (`btn-${id}`) for readable attributes.
  \- Use for ARIA relationships (`aria-labelledby`) to avoid duplicate IDs in the DOM.
  example:
  code: |
  import { useId } from 'react';

  ```
      function Field() {
        const id = useId();
        return (
          <>
            <label htmlFor={id}>Name</label>
            <input id={id} />
          </>
        );
      }
  ```

  useDeferredValue:
  kind: hook
  since: "18.0.0"
  summary: Defer re‑render of a changing value to keep the interface responsive.
  guidance:
  \- Good for autocomplete inputs where rendering the filtered list is expensive.
  \- Combine with `useTransition` for granular control over update priorities.
  example:
  code: |
  import { useState, useDeferredValue } from 'react';

  ```
      function Search({ items }) {
        const [text, setText] = useState('');
        const deferredText = useDeferredValue(text);
        const results = items.filter((i) => i.includes(deferredText));
        return <input value={text} onChange={(e) => setText(e.target.value)} />;
      }
  ```

common\_workflows:

* name: Controlled input with debounced remote fetch
  steps:

  * Use `useState` to hold the raw input.
  * Apply `useDeferredValue` to the state to yield a throttled query term.
  * Trigger fetch inside `useEffect`, including the deferred value in the dependency list.
  * Display loading status using the `isPending` flag from `useTransition` if needed.
* name: Code‑splitting a dashboard route
  steps:

  * Wrap heavy tab components in `React.lazy`.
  * Provide a surrounding `<Suspense>` with a skeleton fallback.
  * Use `memo` to prevent re‑renders when parent props are unchanged.

troubleshooting\_cheatsheet:

* symptom: “Warning: Each child in a list should have a unique 'key' prop.”
  cause: Missing or unstable `key` when rendering arrays.
  fix: Supply a deterministic `key` (id or stable index) or use `Children.toArray`.
* symptom: Component re‑renders despite `memo`.
  cause: Parent passes new function/array/object each render.
  fix: Wrap callbacks in `useCallback` and values in `useMemo` with stable dependency arrays.

faq:

* q: Do I still need `PureComponent` or `shouldComponentUpdate`?
  a: No. Use `memo` for function components and hooks (`useCallback`, `useMemo`) to control updates.
* q: When should I choose `useReducer` over `useState`?
  a: Prefer `useReducer` for state with multiple sub‑fields or when transitions depend on previous state.

external\_resources:

* label: React documentation
  url: [https://react.dev](https://react.dev)
* label: Hooks FAQ
  url: [https://react.dev/learn/hooks-faq](https://react.dev/learn/hooks-faq)

